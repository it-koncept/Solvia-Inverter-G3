# *****************************************************************
# *          ESPHome Custom Component Modbus sniffer for          *
# *              Delta Solvia Inverter 3.0 EU G3 TR               *
# *****************************************************************
#
# This was originally made by htvekov https://github.com/htvekov/solivia_esphome
# I have changed it to G3 inverter and without Solivia GW and added that data can be retrieved from several inverters
#
#
# Remember to copy the Custom Component solivia.h file to the ESPHome folder in
# Home Assistant !!
#
# This config send any commands to the inverter !!
#
# Below the actual ESPHome config, you'll find a compiled list of all registers
# I've identified. Those marked with a question mark are not confirmed,
# but an 'educated guess' only.
#
# Tested on both ESP8266 with software uart and ESP32 with hardware uart.
# I experience no issues in production with the ESP8266 software uart.
# Not even with debug uart logging active.
#
# My config:
# Inverter part no.: EOE46010287
# Single string input PV1: 3300W
# Single phase output: L1
# Slave address: 0x01 0x02 0x03
# Baud rate: 19200
# Install country: Denmark
#
# Gateway request: 02:05:0X:02:60:01:8X:XX:03
# Inverter response: 02:06:0X:FF:60:01 + 157 data bytes (incl. CRC bytes) + ETX byte
#
# Actually the response doesn't match the protocol, as the CRC bytes and trailing
# ETX byte should be excluded from data length identifier (0xff)
# Here, strangely enough, the CRC is included, but not the ETX ?
esphome:
  name: "delta-solivia-8266"
  includes:
    - solivia-G3.h

external_components:
  - source:
      type: git
      url: https://github.com/esphome/esphome
      ref: refs/tags/2024.12.4
    components: [ custom, custom_component ]
    
esp8266:
  board: d1_mini

# Enable logging
logger:
  level: INFO
  baud_rate: 0

# Enable Home Assistant API
api:

mqtt:
  topic_prefix: esphome\
  discovery: false
  broker: 192.168.1.36
  port: 1883
  username: mqtt
  password: hammer

ota:
  platform: esphome
  password: "my_ota_password"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Solivia_8266 Fallback Hotspot"
    password: "my_fallback_password"

captive_portal:

time:
  - platform: sntp
    on_time:
       # Request package every 5 seconds from inverter at slave address: 0x01
      - seconds: 1/3
        then:
          - switch.turn_on: tx
          - uart.write: [0x02, 0x05, 0x01, 0x02, 0x60, 0x01, 0x85, 0xFC, 0x03]
          - switch.turn_off: tx
      - seconds: 2/3
        then:
          - switch.turn_on: tx
          - uart.write: [0x02, 0x05, 0x02, 0x02, 0x60, 0x01, 0x85, 0xB8, 0x03]
          - switch.turn_off: tx
      - seconds: 3/3
        then:
          - switch.turn_on: tx
          - uart.write: [0x02, 0x05, 0x03, 0x02, 0x60, 0x01, 0x84, 0x44, 0x03]
          - switch.turn_off: tx

interval:
  - interval: 5s
    then:
      - mqtt.publish:
          topic: "PV/Delta"
          payload: !lambda |-
            char buffer[200];
            snprintf(buffer, sizeof(buffer),
              "{\"pv\": {\"power\": %.1f, \"L1\": {\"power\": %.1f, \"voltage\": %.1f,\"current\": %.1f,\"frequency\": %.1f}, \"L2\": {\"power\": %.1f, \"voltage\": %.1f,\"current\": %.1f,\"frequency\": %.1f}}}",
              id(pv1_ac_power).state + id(pv2_ac_power).state, id(pv1_ac_power).state, id(pv1_dc_voltage).state, id(pv1_dc_current).state, id(pv1_freq).state, id(pv2_ac_power).state, id(pv2_dc_voltage).state, id(pv2_dc_current).state, id(pv2_freq).state);
            return std::string(buffer);

binary_sensor:
  - platform: status
    name: "Solivia Node Status"
    id: solivia_status
 
uart:
  id: mod_bus
  # tx_pin: 17 # Typical tx pin for hardware UART#2 on ESP32 modules
  # rx_pin: 16 # Typical rx pin for hardware UART#2 on ESP32 modules
  tx_pin: 5 # D2 ESP8266 tx pin for soft serial uart
  rx_pin: 4 # D1 ESP8266 rx pin for soft serial uart
  # Increase buffer size as total package we're sniffing is 262 bytes in total
  # Inverter reply: 6 bytes + Data: 255 bytes + ETX: 1 byte = 262 bytes
  rx_buffer_size: 512
  baud_rate: 19200
  parity: NONE
  stop_bits: 1
  #flow_control_pin: GPIO0
  #debug: # Activate if you need to investigate package details in the log
# Example configuration entry

switch:
  - platform: gpio
    id: tx
    name: "TX"
    pin: 0

sensor:
- platform: custom
  lambda: |-
    auto delta = new soliviag3(id(mod_bus));
    App.register_component(delta);
    return {delta->pv1_ac_power, delta->pv1_d_yield, delta->pv1_dc_a, delta->pv1_dc_v, delta->pv1_ac_a, delta->pv1_freq, delta->pv1_ac_v, delta->pv1_hs_1, delta->pv1_hs_2, delta->pv1_iso_plus, delta->pv1_iso_minus, delta->pv2_ac_power, delta->pv2_d_yield, delta->pv2_dc_a, delta->pv2_dc_v, delta->pv2_ac_a, delta->pv2_ac_v, delta->pv2_hs_1, delta->pv2_hs_2, delta->pv2_iso_plus, delta->pv2_iso_minus, delta->pv3_ac_power, delta->pv3_d_yield, delta->pv3_dc_a, delta->pv3_dc_v, delta->pv3_ac_a, delta->pv3_ac_v, delta->pv3_hs_1, delta->pv3_hs_2, delta->pv3_iso_plus, delta->pv3_iso_minus};

  sensors:
  - name: "PV1 AC power"
    icon: mdi:power-plug
    id: pv1_ac_power
    device_class: energy
    unit_of_measurement: W
    accuracy_decimals: 0
    # Frequent update, as sensor is used to calculate consumption with iem3155 sensor.total_active_power
    filters:
    - throttle: 5s 
  
  - name: "PV1 Solar daily yield"
    icon: mdi:chart-line
    device_class: energy
    # Set state_class in order for HA to use sensor in the Energy component
    state_class: total_increasing
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
    - throttle: 5s
    - multiply: 0.01
  
  - name: "PV1 DC current"
    id: pv1_dc_current
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV1 DC voltage"
    id: pv1_dc_voltage
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV1 AC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV1 AC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV1 HZ"
    id: pv1_freq
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV1 Heat sink #1"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s
  
  - name: "PV1 Heat sink #2"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s

  - name: "PV1 ISO +"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s
  
  - name: "PV1 ISO -"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s

  - name: "PV2 AC power"
    icon: mdi:power-plug
    id: pv2_ac_power
    device_class: energy
    unit_of_measurement: W
    accuracy_decimals: 0
    # Frequent update, as sensor is used to calculate consumption with iem3155 sensor.total_active_power
    filters:
    - throttle: 5s 
  
  - name: "PV2 Solar daily yield"
    icon: mdi:chart-line
    device_class: energy
    # Set state_class in order for HA to use sensor in the Energy component
    state_class: total_increasing
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
    - throttle: 5s
    - multiply: 0.01
  
  - name: "PV2 DC current"
    id: pv2_dc_current
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV2 DC voltage"
    id: pv2_dc_voltage
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV2 AC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV2 AC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV2 HZ"
    id: pv2_freq
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV2 Heat sink #1"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s
  
  - name: "PV2 Heat sink #2"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s

  - name: "PV2 ISO +"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s
  
  - name: "PV2 ISO -"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s

  - name: "PV3 AC power"
    icon: mdi:power-plug
    device_class: energy
    unit_of_measurement: W
    accuracy_decimals: 0
    # Frequent update, as sensor is used to calculate consumption with iem3155 sensor.total_active_power
    filters:
    - throttle: 10s 
  
  - name: "PV3 Solar daily yield"
    icon: mdi:chart-line
    device_class: energy
    # Set state_class in order for HA to use sensor in the Energy component
    state_class: total_increasing
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
    - throttle: 10s
    - multiply: 0.01
  
  - name: "PV3 DC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV3 DC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV3 AC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 10s
    - multiply: 0.1
  
  - name: "PV3 AC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 10s
  
  - name: "PV3 Heat sink #1"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s
  
  - name: "PV3 Heat sink #2"
    device_class: temperature
    unit_of_measurement: Â°C
    filters:
    - throttle: 10s

  - name: "PV3 ISO +"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s
  
  - name: "PV3 ISO -"
    device_class: energy
    unit_of_measurement: kÎ©
    filters:
    - throttle: 10s
